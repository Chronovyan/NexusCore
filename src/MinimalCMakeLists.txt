cmake_minimum_required(VERSION 3.14)
project(MinimalOpenGLTest VERSION 1.0 LANGUAGES CXX)

# Standard output directories
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Global compiler settings
if(MSVC)
    add_compile_options(/W4)
elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    # Use clang-specific compiler flags
    message(STATUS "Using Clang compiler flags")
    add_compile_options(-Wall -Wextra -Wpedantic -Wno-language-extension-token)
else()
    # Default compiler flags for other compilers (like GCC)
    message(STATUS "Using default compiler flags")
    add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# Enable ccache if available for faster builds
find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
    message(STATUS "Found ccache: ${CCACHE_PROGRAM}")
    set(CMAKE_C_COMPILER_LAUNCHER "${CCACHE_PROGRAM}")
    set(CMAKE_CXX_COMPILER_LAUNCHER "${CCACHE_PROGRAM}")
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF) # Prefer not to use compiler-specific extensions

# GLFW path
set(GLFW_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../external/glfw)

# --- GLFW (required for OpenGL context) ---
option(GLFW_BUILD_EXAMPLES OFF)
option(GLFW_BUILD_TESTS OFF)
option(GLFW_BUILD_DOCS OFF)
option(GLFW_INSTALL OFF)
option(GLFW_WERROR OFF)  # Disable treating warnings as errors for GLFW
add_subdirectory(${GLFW_DIR})

# Find OpenGL
find_package(OpenGL REQUIRED)

# Find GLEW package
find_package(GLEW QUIET)
if(NOT GLEW_FOUND)
  message(STATUS "GLEW not found via find_package, looking for it in external directory")
  # Check if GLEW is in external directory
  if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../external/glew/include/GL/glew.h")
    message(STATUS "Using GLEW from external directory")
    set(GLEW_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/../external/glew/include")
    if(WIN32)
      set(GLEW_LIBRARIES "${CMAKE_CURRENT_SOURCE_DIR}/../external/glew/lib/Release/x64/glew32.lib")
    else()
      set(GLEW_LIBRARIES "${CMAKE_CURRENT_SOURCE_DIR}/../external/glew/lib/libGLEW.a")
    endif()
    set(GLEW_FOUND TRUE)
  else()
    message(WARNING "GLEW not found. Some targets may fail to build.")
    set(GLEW_INCLUDE_DIRS "")
    set(GLEW_LIBRARIES "")
  endif()
endif()

# --- Minimal OpenGL Test ---
add_executable(MinimalOpenGLTest main_minimal.cpp)
target_link_libraries(MinimalOpenGLTest PRIVATE glfw OpenGL::GL)
target_include_directories(MinimalOpenGLTest PRIVATE 
  ${GLFW_DIR}/include
)
if(GLEW_FOUND)
  target_include_directories(MinimalOpenGLTest PRIVATE ${GLEW_INCLUDE_DIRS})
  target_link_libraries(MinimalOpenGLTest PRIVATE ${GLEW_LIBRARIES})
endif() 