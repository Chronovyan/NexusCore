---
description: 
globs: 
alwaysApply: false
---
**Global Rule: General Error Handling Philosophy (Template)**

**Purpose:** To establish a consistent, robust, and maintainable approach to error handling in code generated or suggested by the AI, applicable across various languages and projects unless overridden by more specific rules.

**Instructions for the AI:**
"When generating, reviewing, or suggesting code that involves error handling, you **must** adhere to the following principles. These guidelines are general; language-specific error handling rules (like those in a C++ specific rule) or project-specific conventions should take precedence if they conflict."

**1. Core Principles:**
    * "Error handling should aim for:
        * **Robustness:** Applications should handle errors gracefully and avoid crashing.
        * **Clarity & Debuggability:** Errors should be easy to understand, diagnose, and trace.
        * **Maintainability:** Error handling logic should be clean and not overly obscure the primary logic.
        * **User Experience:** Users should receive clear, helpful information for errors they encounter, without exposing sensitive system details."
    * "Fail Fast (generally preferred): Errors should be detected and reported as close as possible to where they occur, unless a clear strategy for graceful degradation or recovery at a higher level is in place."

**2. Error Signaling Mechanisms:**
    * "(User to specify general preferences, acknowledging language differences. Examples:)
        * **Exceptions (Default for many OOP languages):** 'In languages that support exceptions (e.g., Java, C#, Python, C++), prefer using exceptions to signal and propagate errors that prevent a function from fulfilling its contract. Use standard, built-in exception types where appropriate, or derive custom, meaningful exception types from them.'
        * **Result/Option Types (Common in functional languages, Rust, modern C++):** 'In languages supporting them (or when using libraries that provide them, e.g., `std::optional` and `std::expected` in C++20/23, or similar constructs in Rust/Swift/Kotlin), prefer these for functions that can predictably 'fail' or return an empty result as part of their normal operation. This makes error conditions explicit in the function signature.'
        * **Error Codes (Use with caution):** 'Avoid plain error codes as primary return values in new, high-level code if exceptions or Result/Option types are idiomatic for the language. If error codes must be used (e.g., interfacing with C libraries, performance-critical sections), ensure they are well-documented, consistently used, and preferably wrapped in a more robust error handling mechanism at the earliest opportunity.'"

**3. Error Handling Strategy:**
    * **Catch or Propagate:**
        * "Handle an error (e.g., catch an exception) only if you can genuinely add value or recover from it at the current level of abstraction (e.g., retry an operation, provide a default value, log it and convert it to a more context-specific error)."
        * "If an error cannot be handled meaningfully at the current level, propagate it (e.g., let the exception bubble up, or return the error/`None`/`Error` variant) to a higher level that has more context."
    * **Resource Cleanup:** "Always ensure that resources (memory, file handles, locks, network connections, etc.) are cleaned up properly, even in the presence of errors. Use RAII (C++), `try-finally` (Java/C#), `defer` (Go), context managers (`with` statement in Python), or similar language constructs."

**4. Logging Errors:**
    * "Log errors comprehensively, especially at service boundaries or when an error is first caught and cannot be fully recovered from."
    * **Information to Log:** "(User to specify, e.g., Timestamp, error severity/level, error message, relevant context (e.g., user ID, request ID, operation being performed), stack trace (for exceptions), any underlying error codes or messages.)"
    * **Log Levels:** "(User to specify, e.g., Use standard log levels like ERROR, WARNING, INFO, DEBUG appropriately. Critical, unrecoverable errors should be logged at ERROR or CRITICAL.)"
    * **Avoid Sensitive Data in Logs:** "Ensure logs do not contain passwords, PII, session tokens, or other sensitive information, as also stated in security guidelines."

**5. Error Messages:**
    * **For End Users:** "User-facing error messages should be clear, concise, user-friendly, and actionable if possible. Avoid technical jargon or internal system details."
    * **For Developers/Logs:** "Error messages in logs or exceptions intended for developers should be detailed and provide enough context to diagnose the issue."

**6. Custom Error Types/Exceptions:**
    * "(User to specify, e.g.:)
        * 'When defining custom exception types, ensure they are descriptive and derive from appropriate base exception classes (e.g., `std::exception` in C++, `Exception` in Java/C#).'
        * 'Include relevant contextual information in custom exceptions (e.g., what operation failed, any relevant values that contributed to the failure).'"

**7. Retries and Resilience (If applicable):**
    * "For transient errors (e.g., temporary network issues), consider implementing a retry mechanism with appropriate backoff strategies (e.g., exponential backoff with jitter)."
    * "Define clear limits on retries."

"When suggesting error handling logic, explain your choices based on these principles. If code lacks proper error handling, suggest improvements."