---
description: 
globs: .cpp
alwaysApply: false
---

# Your rule content

- You can @ files here**Global Rule: C++ Best Practices and Coding Standards (Template)**

**Purpose:** To guide the AI in generating and suggesting C++ code that aligns with modern practices, safety, readability, and specified project/user preferences.

**Instructions for the AI:**
"When generating, reviewing, or suggesting C++ code, strictly adhere to the following principles and standards:"

**1. General Philosophy:**
    * "Strive for code that is safe, readable, maintainable, and leverages modern C++ features appropriately."
    * "Prioritize clarity over excessive cleverness."
    * *(User to add any other core philosophies)*

**2. C++ Standard Version:**
    * "(User to specify: e.g., 'Default to C++17. Features from newer standards like C++20 or C++23 may be used if explicitly requested or if they significantly improve safety/clarity and are commonly available.')"

**3. Resource Management:**
    * "Strictly enforce RAII (Resource Acquisition Is Initialization) for all applicable resources (memory, file handles, network sockets, locks, etc.)."
    * "Always prefer standard smart pointers (`std::unique_ptr`, `std::shared_ptr`) over raw pointers for owning memory. Use `std::weak_ptr` to break circular dependencies with `std::shared_ptr`."
    * "Utilize `std::make_unique` and `std::make_shared` instead of direct `new` with smart pointer constructors."
    * "Avoid manual `new` and `delete` unless in very specific low-level code that is clearly justified and encapsulated."
    * "Standard library containers should be the default choice for managing collections of objects."

**4. `const` Correctness:**
    * "Apply `const` exhaustively:
        * For variables whose values should not change after initialization.
        * For member functions that do not modify the object's observable state.
        * For parameters passed by pointer or reference that should not be modified by the function.
    * This is critical for API design, thread-safety implications, and enabling compiler optimizations."

**5. Error Handling:**
    * "(User to specify their primary strategy. Examples:)
        * 'Prefer exceptions for reporting and propagating errors that prevent a function from completing its intended task, especially in constructors or for system-level issues. Use standard exception types (`std::runtime_error`, `std::logic_error`, etc.) or custom types derived from them.'
        * 'For recoverable errors or conditions where performance is paramount and exceptions are too costly, `std::optional<T>` (for values that might be absent) or `std::expected<T, E>` (for C++23 onwards, to return a value or an error) can be used. Clearly document error return conventions.'
        * 'Avoid using raw error codes as primary return values for complex functions; encapsulate them if necessary.'
    * "Ensure all potential error conditions are considered and handled gracefully."

**6. Header Files & Includes:**
    * "All header files must use include guards (prefer `#pragma once` for simplicity if widely supported by target compilers, otherwise use traditional `#ifndef FILENAME_H_` ... `#endif` with a unique guard symbol)."
    * "Minimize includes in header files. Prefer forward declarations for types whenever possible to reduce compilation dependencies."
    * "Order of includes in `.cpp` files (User to specify, e.g.):
        1.  The corresponding header for this `.cpp` file (if applicable).
        2.  Other headers from the same project/module.
        3.  Third-party library headers (e.g., Boost, Qt).
        4.  C++ Standard Library headers.
        5.  C Standard Library headers (if any)."
    * "Avoid `using namespace std;` in header files. In `.cpp` files, its use should be limited to specific, narrow scopes if used at all."

**7. Code Style & Formatting (High-Level Guidelines):**
    * "Naming Conventions: (User to specify, e.g., `UpperCamelCase` for class and struct names, `lowerCamelCase` or `snake_case` for function and variable names, `kConstantCase` or `ALL_CAPS_SNAKE_CASE` for constants and enums)."
    * "Brace Style: (User to specify, e.g., Allman, K&R, etc. 'Braces should be used for all control flow statements (if, else, while, for), even single-line ones.')"
    * "Indentation: (User to specify, e.g., 'Use 4 spaces for indentation, no tabs.')"
    * "Line Length: (User to specify, e.g., 'Aim for a maximum line length of 100 characters.')"
    * "Pointers and References: (User to specify, e.g., 'Place asterisk/ampersand next to the type: `int* p;` or next to the name: `int *p;` - be consistent!')"
    * *(This section provides general guidance. Assume a dedicated formatter like ClangFormat might be used, but these are fallback principles.)*

**8. Forbidden Practices & Anti-Patterns:**
    * "Avoid C-style casts (`(Type)value` or `Type(value)` for non-constructor casts). Always prefer C++ named casts (`static_cast`, `reinterpret_cast`, `const_cast`, `dynamic_cast`) and understand their specific use cases."
    * "Avoid `goto`."
    * "Avoid macros for constants or functions if `constexpr`, `inline` functions, templates, or enums can achieve the same result more safely."
    * "Avoid using `NULL` or `0` for pointers; use `nullptr`."
    * "(User to add other specific functions like `gets`, or patterns like `strcpy` without size checks if `std::string` or safer alternatives are not used, etc.)"

**9. Modern C++ Features (If applicable, based on C++ Standard Version):**
    * "Leverage lambdas for concise, localized functions/callbacks."
    * "Utilize `auto` for type deduction where it enhances readability, but not where it obscures necessary type information (e.g., in function signatures for APIs)."
    * "Prefer range-based for loops for iterating over containers."
    * "Use `constexpr` for compile-time computations where possible."
    * "(User to add preferences for other features like structured bindings, `if constexpr`, concepts, coroutines, modules, etc., based on the chosen C++ standard)."

**10. Concurrency (If applicable):**
    * "(User to specify guidelines for `std::thread`, `std::mutex`, `std::atomic`, `std::async`, etc.)"
    * "Always protect shared data with appropriate synchronization primitives."
    * "Be mindful of deadlocks, race conditions, and data races."

**11. Other Specific Guidelines:**
    * "(User to add any other specific rules, e.g., regarding template metaprogramming, use of specific libraries, or project-specific architectural patterns.)"
- You can use markdown but dont have to
