---
description: 
globs: 
alwaysApply: false
---
**Global Rule: Security Best Practices (Template)**

**Purpose:** To ensure that code generated, reviewed, or suggested by the AI incorporates fundamental security principles, reducing the risk of common vulnerabilities.

**Instructions for the AI:**
"When generating, reviewing, or suggesting code, you **must** actively consider and apply the following security best practices. If the current project has specific security guidelines or uses particular security libraries/frameworks, integrate those and highlight their use. Always err on the side of security."

**1. General Security Mindset:**
    * "Adopt a 'defense in depth' mentality. Assume that any external input or dependency could be malicious."
    * "Prioritize security in all stages of development, from design to implementation and testing."
    * "When in doubt about a security implication, flag it for review or suggest the most secure alternative."

**2. Input Validation and Sanitization:**
    * "All external inputs (user data, API requests, file uploads, environment variables, etc.) **must** be strictly validated against an allow-list of expected formats, types, lengths, and ranges."
    * "Sanitize inputs appropriately before they are used in queries, file paths, commands, or displayed in UIs to prevent injection attacks (SQLi, XSS, Command Injection, etc.)."
    * "Clearly define trust boundaries. Data crossing from a less trusted to a more trusted zone requires rigorous validation."

**3. Output Encoding:**
    * "Encode all data displayed in user interfaces (HTML, JavaScript, etc.) to prevent Cross-Site Scripting (XSS). Use context-aware encoding."
    * "Ensure data sent to other systems or interpreters is appropriately encoded or escaped for that context."

**4. Authentication and Authorization:**
    * "If suggesting authentication mechanisms, recommend strong, industry-standard practices (e.g., multi-factor authentication (MFA), secure password hashing and storage using algorithms like Argon2, bcrypt, or scrypt)."
    * "Ensure robust authorization checks are applied for every request that accesses resources or performs actions. Verify that the authenticated user has the necessary permissions."
    * "Apply the Principle of Least Privilege: grant only the minimum necessary permissions for any user, service, or component."

**5. Secrets Management:**
    * "Never hardcode secrets (API keys, passwords, database credentials, encryption keys, etc.) in source code, configuration files committed to version control, or logs."
    * "Recommend the use of secure secret management solutions (e.g., environment variables (carefully managed), HashiCorp Vault, AWS Secrets Manager, Azure Key Vault, or platform-specific secure storage)."
    * "If handling secrets in code, minimize their time in memory and ensure they are not logged."

**6. Dependency Management:**
    * "When suggesting adding or updating dependencies (libraries, frameworks, tools):
        * Prefer reputable and well-maintained libraries.
        * Recommend checking for known vulnerabilities in dependencies (e.g., using tools like OWASP Dependency-Check, npm audit, GitHub Dependabot)."
        * Suggest pinning to specific, trusted versions rather than open-ended ranges where appropriate."

**7. Error Handling and Logging (Security Perspective):**
    * "Avoid revealing sensitive information in error messages to users (e.g., stack traces, database details, internal paths)."
    * "Log security-relevant events (e.g., failed login attempts, authorization failures, potential attacks), but ensure logs do not contain sensitive data (passwords, session tokens, PII unless specifically required and secured)."

**8. Protection Against Common Vulnerabilities:**
    * "(User to specify or emphasize particular vulnerabilities based on their tech stack, e.g.:)
        * **SQL Injection (SQLi):** 'Always use parameterized queries or prepared statements. Avoid dynamic query construction with user inputs.'
        * **Cross-Site Scripting (XSS):** 'Implement strict input validation and context-aware output encoding. Utilize Content Security Policy (CSP).'
        * **Cross-Site Request Forgery (CSRF):** 'Employ anti-CSRF tokens for state-changing requests.'
        * **Command Injection:** 'Avoid calling shell commands with user-supplied data. If unavoidable, meticulously sanitize inputs and use command execution APIs that support argument separation.'
        * **Insecure Deserialization:** 'Avoid deserializing untrusted data. If necessary, use safe deserialization methods and types.'
        * **XML External Entity (XXE) Injection:** 'Disable external entity processing in XML parsers if not explicitly needed.'
        * **Insecure File Uploads:** 'Validate file types, names, and sizes. Store uploaded files outside the webroot or with restricted permissions. Scan for malware.'"

**9. Secure Defaults:**
    * "When suggesting configurations for systems or frameworks, recommend secure defaults."
    * "Disable unnecessary features or services to reduce the attack surface."

**10. Regular Review & Updates:**
    * "If generating boilerplate or project templates, include reminders or placeholders for security considerations and regular security reviews."

"If you identify code that violates these security principles, proactively suggest a more secure alternative and explain the potential risks."