# Minimum required CMake version
cmake_minimum_required(VERSION 3.21)

# Project definition
project(MinimalTextEditor
    VERSION 1.0.0
    DESCRIPTION "Minimal Text Editor"
    LANGUAGES CXX C
)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Set output directories
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Set default build type to Release if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

# Find required packages
find_package(OpenGL REQUIRED)

# Set ImGui source files
set(IMGUI_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/imgui)
file(GLOB IMGUI_SOURCES
    "${IMGUI_DIR}/*.cpp"
    "${IMGUI_DIR}/backends/imgui_impl_glfw.cpp"
    "${IMGUI_DIR}/backends/imgui_impl_opengl3.cpp"
)

# Create ImGui library
add_library(imgui STATIC ${IMGUI_SOURCES})
target_include_directories(imgui PUBLIC
    ${IMGUI_DIR}
    ${IMGUI_DIR}/backends
)

# Core editor sources
set(SOURCES
    src/main.cpp
    src/Editor.cpp
    src/TextBuffer.cpp
    src/SyntaxHighlightingManager.cpp
    src/SyntaxHighlighter.cpp
    src/EditorCommands.cpp
    src/ModernEditorCommands.cpp
    src/ThreadPool.cpp
    src/EditorDiffMerge.cpp
    src/MultiCursor.cpp
    src/EditorError.cpp
    src/EditorErrorGlobals.cpp
)

# Create the executable
add_executable(MinimalTextEditor ${SOURCES})

# Set target properties
target_compile_features(MinimalTextEditor PRIVATE cxx_std_17)

# Link libraries
target_link_libraries(MinimalTextEditor PRIVATE 
    OpenGL::GL
    glfw
    GLEW::GLEW
    imgui
)

# Include directories
target_include_directories(MinimalTextEditor PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_BINARY_DIR}/include
    ${IMGUI_DIR}
    ${IMGUI_DIR}/backends
)
