name: CI

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
  pull_request:
    branches: [ main, master ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'

# Cancel previous runs for the same PR or branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true


jobs:
  code-style:
    name: Code Style
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install clang-format and clang-tidy
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy

    - name: Check code formatting
      run: |
        # Check formatting
        find src include tests -name '*.h' -o -name '*.cpp' | xargs clang-format --dry-run --Werror
        
        # Run clang-tidy
        mkdir -p build
        cd build
        cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        run-clang-tidy -p . -header-filter='(src|include)/.*\.(h|hpp|cpp)$'

  build:
    needs: code-style
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
        exclude:
          # Skip Debug on macOS to speed up CI
          - os: macos-latest
            build_type: Debug
          # Skip coverage on Windows for now due to gcov limitations
          - os: windows-latest
            enable_coverage: true

    env:
      ENABLE_COVERAGE: ${{ matrix.enable_coverage || 'OFF' }}
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cmake
        if [ "${{ runner.os }}" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y lcov
        fi

    - name: Create build directory
      run: mkdir -p build

    - name: Configure CMake
      working-directory: build
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DENABLE_COVERAGE=${{ env.ENABLE_COVERAGE }}

    - name: Build
      working-directory: build
      run: |
        cmake --build . --config ${{ matrix.build_type }}

    - name: Run tests
      working-directory: build
      run: |
        ctest -C ${{ matrix.build_type }} --output-on-failure

    - name: Generate Coverage Report
      if: matrix.enable_coverage && runner.os != 'Windows' && matrix.build_type == 'Debug'
      working-directory: build
      run: |
        make coverage

    - name: Upload Coverage Report
      if: matrix.enable_coverage && runner.os != 'Windows' && matrix.build_type == 'Debug'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: build/coverage_report/
        if-no-files-found: error

  coverage:
    needs: build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
    - name: Download Coverage Report
      uses: actions/download-artifact@v3
      with:
        name: coverage-report
        path: coverage_report

    - name: Upload to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        directory: coverage_report
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
